***************An overview of HTTP***************
1) HTTP is a protocol for fetching resources such as HTML documents. It is the foundation of any data exchange on the Web and it is a client-server protocol, which means requests are initiated by the recipient, usually the Web browser. A complete document is reconstructed from the different sub-documents fetched, for instance, text, layout description, images, videos, scripts, and more.

2) Clients and servers communicate by exchanging individual messages (as opposed to a stream of data). The messages sent by the client, usually a Web browser, are called requests and the messages sent by the server as an answer are called responses.

3) A Web page is a hypertext document. This means some parts of the displayed content are links, which can be activated (usually by a click of the mouse) to fetch a new Web page, allowing the user to direct their user-agent and navigate through the Web. The browser translates these directions into HTTP requests, and further interprets the HTTP responses to present the user with a clear response.

4) On the opposite side of the communication channel is the server, which serves the document as requested by the client. A server appears as only a single machine virtually; but it may actually be a collection of servers sharing the load (load balancing), or a complex piece of software interrogating other computers (like cache, a DB server, or e-commerce servers), totally or partially generating the document on demand.


5) Between the Web browser and the server, numerous computers and machines relay the HTTP messages. Due to the layered structure of the Web stack, most of these operate at the transport, network or physical levels, becoming transparent at the HTTP layer and potentially having a significant impact on performance. Those operating at the application layers are generally called proxies. These can be transparent, forwarding on the requests they receive without altering them in any way, or non-transparent, in whichh case they will change the request in some way before passing it along to the server. Proxies may perform numerous functions:

caching (the cache can be public or private, like the browser cache)
filtering (like an antivirus scan or parental controls)
load balancing (to allow multiple servers to serve different requests)
authentication (to control access to different resources)
logging (allowing the storage of historical information)

6) HTTP messages, as defined in HTTP/1.1 and earlier, are human-readable. In HTTP/2, these messages are embedded into a binary structure, a frame, allowing optimizations like compression of headers and multiplexing. Even if only part of the original HTTP message is sent in this version of HTTP, the semantics of each message is unchanged and the client reconstitutes (virtually) the original HTTP/1.1 request. It is therefore useful to comprehend HTTP/2 messages in the HTTP/1.1 format.

7) Requests consists of the following elements:

An HTTP method, usually a verb like GET, POST, or a noun like OPTIONS or HEAD that defines the operation the client wants to perform. Typically, a client wants to fetch a resource (using GET) or post the value of an HTML form (using POST), though more operations may be needed in other cases.
The path of the resource to fetch; the URL of the resource stripped from elements that are obvious from the context, for example without the protocol (http://), the domain (here, developer.mozilla.org), or the TCP port (here, 80).
The version of the HTTP protocol.
Optional headers that convey additional information for the servers.
A body, for some methods like POST, similar to those in responses, which contain the resource sent.

8) A user agent is a computer program representing a person, for example, a browser in a Web context




***************HTTP caching***************
1) The performance of web sites and applications can be significantly improved by reusing previously fetched resources. Web caches reduce latency and network traffic and thus lessen the time needed to display resource representations. HTTP caching makes Web sites more responsive.


***************HTTP cookies***************
1) An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user's web browser. The browser may store the cookie and send it back to the same server with later requests. Typically, an HTTP cookie is used to tell if two requests come from the same browserâ€”keeping a user logged in, for example. It remembers stateful information for the stateless HTTP protocol.

2) Cookies are mainly used for three purposes:

Session management
Logins, shopping carts, game scores, or anything else the server should remember

Personalization
User preferences, themes, and other settings

Tracking
Recording and analyzing user behavior

3) reating cookie
After receiving an HTTP request, a server can send one or more Set-Cookie headers with the response. The browser usually stores the cookie and sends it with requests made to the same server inside a Cookie HTTP header

4) Define lifetime of a cookie
The lifetime of a cookie can be defined in two ways.

Session cookies are deleted when the current session ends. The browser defines when the "current session" ends, and some browsers use session restoring when restarting. This can cause session cookies to last indefinitely.

Permanent cookies are deleted at a date specified by the Expires attribute, or after a period of time specified by the Max-Age attribute.

5) Restrict access to cookies
You can ensure that cookies are sent securely and aren't accessed by unintended parties or scripts in one of two ways: with the Secure attribute and the HttpOnly attribute.

6) Define where cookies are sent

7) A cookie is associated with a particular domain and scheme (such as http or https), and may also be associated with subdomains if the Set-Cookie Domain attribute is set. If the cookie domain and scheme match the current page, the cookie is considered to be from the same site as the page, and is referred to as a first-party cookie.

8) If the domain and scheme are different, the cookie is not considered to be from the same site, and is referred to as a third-party cookie. While the server hosting a web page sets first-party cookies, the page may contain images or other components stored on servers in other domains (for example, ad banners) that may set third-party cookies. These are mainly used for advertising and tracking across the web.


***************HTTP Messages***************
1) HTTP messages are how data is exchanged between a server and a client. There are two types of messages: requests sent by the client to trigger an action on the server, and responses, the answer from the server.



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


***********Resources and URIs***********
1) HTTP allows a browser, or another user agent, 
to communicate with different resources on the Internet: 
to do this the browser needs both the identity and the location of the resources. 
These two bits of information are described by a URI.

2) A URI (Uniform Resource Identifier) is a string that refers to a resource.

3) The target of an HTTP request is called a "resource", whose nature isn't defined further; 
it can be a document, a photo, or anything else. Each resource is iden
tified by a Uniform Resource Identifier (URI) used throughout HTTP for identifying resources.

4) Uniform Resource Locator (URL) is a text string that specifies where a resource 
(such as a web page, image, or video) can be found on the Internet.

5) Syntax of Uniform Resource Identifiers (URIs)

http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument

Scheme or protocol
http:// is the protocol. It indicates which protocol the browser must use. 
Usually it is the HTTP protocol or its secured version, HTTPS. 
The Web requires one of these two, but browsers also know how to handle other 
protocols such as mailto: (to open a mail client) or ftp: to handle a file transfer, 
so don't be surprised if you see such protocols. 

Authority or Domain name
www.example.com is the domain name or authority that governs the namespace. 
It indicates which Web server is being requested. Alternatively, 
it is possible to directly use an IP address, but 
because it is less convenient, it is not often used on the Web.

Port
:80 is the port in this instance. It indicates the technical "gate" 
used to access the resources on the web server. 
It is usually omitted if the web server uses 
the standard ports of the HTTP protocol (80 for HTTP and 443 for HTTPS) 
to grant access to its resources. Otherwise, it is mandatory.

Paath
/path/to/myfile.html is the path to the resource on the Web server. 
In the early days of the Web, a path like this represented 
a physical file location on the Web server. Nowadays, 
it is mostly an abstraction handled by Web servers without any physical reality.


Query
?key1=value1&key2=value2 are extra parameters provided to the Web server. 
Those parameters are a list of key/value pairs separated with the & symbol. 
The Web server can use those parameters to do extra stuff before returning 
the resource to the user. Each Web server has its own rules regarding parameters, 
and the only reliable way to know how a specific Web server is handling parameters 
is by asking the Web server owner.

Fragment or Anchor
#SomewhereInTheDocument is an anchor to another part of the resource itself. 
An anchor represents a sort of "bookmark" inside the resource, 
giving the browser the directions to show the content located at that "bookmarked" spot. 
On an HTML document, for example, the browser will scroll to the point 
where the anchor is defined; on a video or audio document, 
the browser will try to go to the time the anchor represents. 
It is worth noting that the part after the #, also known as the fragment identifier, 
is never sent to the server with the request.

6) Data URLs, URLs prefixed with the data: scheme, allow content 
creators to embed small files inline in documents. They were formerly 
known as "data URIs" until that name was retired by the WHATWG.

7) Choosing between www and non-www URLs
Yes, you need to choose one and stick with it. 
The choice of which one to have as your canonical location is yours, 
but if you choose one, stick with it. 
It will make your website appear more consistent to your users and to search engines. 
This includes always linking to the chosen domain 
(which shouldn't be hard if you're using relative URLs in your website) 
and always sharing links (by email/social networks, etc.) to the same domain.

No, you can have two. What is important is that you are coherent 
and consistent with which one is the official domain. 
This official domain is called the canonical name. 
All your absolute links should use it. But even so, you can still have 
the other domain working: HTTP allows two techniques so that it is clear for your users, 
or search engines, which domain is the canonical one, while 
still allowing the non-canonical domain to work and provide the expected pages.
So, choose one of your domains as your canonical one! 
There are two techniques below to allow the non-canonical domain to work still.


***********MIME tpyess***********
1) A media type (also known as a Multipurpose Internet Mail Extensions or MIME type) 
indicates the nature and format of a document, file, or assortment of bytes.

2) A simplest MIME type consists of a type and a subtype. 
A MIME type comprises these strings concatenated with a slash (/). 
No whitespace is allowed in a MIME type:

3) The type represents the general category into which the data type falls, such as video or text.

The subtype identifies the exact kind of data of the specified type the MIME type represents. 
For example, for the MIME type text, the subtype might be plain (plain text), html (HTML source code), 
or calendar (for iCalendar/.ics) files.

4) Each type has its own set of possible subtypes. 
A MIME type always has both a type and a subtype, never just one or the other.

5) Types
There are two classes of type: discrete and multipart. 
Discrete types are types which represent a single file or medium, 
such as a single text or music file, or a single video. 
A multipart type is one which represents a document that's comprised of multiple component parts, 
each of which may have its own individual MIME type; 
or, a multipart type may encapsulate multiple files being sent together in one transaction. 
For example, multipart MIME types are used when attaching multiple files to an email.


***********HTTP headers***********
1) HTTP headers let the client and the server pass additional information with an HTTP request or response.

2) Headers can be grouped according to their contexts:

Request headers contain more information about the resource to be fetched, or about the client requesting the resource.
Response headers hold additional information about the response, like its location or about the server providing it.
Representation headers contain information about the body of the resource, like its MIME type, or encoding/compression applied.
Payload headers contain representation-independent information about payload data, including content length and the encoding used for transport.

3) Types of HTTP headers
General header is an outdated term used to refer to an HTTP header that can be used in both request and response messages, but which doesn't apply to the content itself

A request header is an HTTP header that can be used in an HTTP request to provide information about the request context, so that the server can tailor the response.

A response header is an HTTP header that can be used in an HTTP response and that doesn't relate to the content of the message

A representation header is an HTTP header that describes the particular representation of the resource sent in an HTTP message body.

A payload header is an HTTP header that describes the payload information related to safe transport and reconstruction of the original resource representation, from one or more messages


***********Connection***********
1) The Connection general header controls whether the network connection stays open after the current transaction finishes. If the value sent is keep-alive, the connection is persistent and not closed, allowing for subsequent requests to the same server to be done.



***********HTTP response status codes***********
1) HTTP response status codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes:

Informational responses (100â€“199)
Successful responses (200â€“299)
Redirection messages (300â€“399)
Client error responses (400â€“499)
Server error responses (500â€“599)






















